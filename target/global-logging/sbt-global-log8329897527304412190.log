[0m[[0m[0mdebug[0m] [0m[0m> Exec(collectAnalyses, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Processing event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: initialized: JsonRpcNotificationMessage(2.0, initialized, {})[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / collectAnalyses[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///Users/macbook/Desktop/IBM/DATA%20ENGINEER/00%20-%20BootCamp%20Data%20Engineer%20-%20DataScientist/Ders%20Notlari%20Jupeyter%20Notebook/TEST_EXAMS/TEST_09_SCALA/Extract.scala","languageId":"scala","version":1,"text":"/// Extract Final\n//Import Libararies\nimport org.apache.spark.sql.SparkSession\nimport java.io.PrintWriter\nimport scala.util.parsing.json.JSON\n\nobject Extract {\n  def main(args: Array[String]) {\n    val spark = SparkSession.builder()\n      .appName(\"Extract\")\n      .master(\"local[*]\")\n      .getOrCreate()\n\n    val year: Int = 2021\n    val totalPage: Int = 2  // sil sonra !!!!!!!!!!!!!!!!!!\n    println(s\"$year, $totalPage, Step 1 OK\")\n\n\n    // Teams API\n    val r = requests.get(\"https://www.balldontlie.io/api/v1/teams\")\n   \n   if (r.statusCode == 200 ){\n      val jsonText = r.text\n\n      val writer = new PrintWriter(\"teams1.json\")\n      writer.println(jsonText)\n\n      writer.close()\n     println(\"jsonText API Okey.\")\n     }  else {\n      println(\"jsonText API Error.\")\n     }\n\n   val r2 = requests.get(\"https://www.balldontlie.io/api/v1/teams?page=2\")\n   \n   if (r.statusCode == 200 ){\n      val jsonText2 = r2.text\n      val writer = new PrintWriter(\"teams2.json\")\n      writer.println(jsonText2)\n      writer.close()\n      println(\"jsonText2 API Okey.\")\n     }    else {\n      println(\"jsonText2 API Error.\")\n     }   \n\n     println(\"Teams API Ended\")\n\n     // Matches API\n    val team_ids: List[Int] = List(1, 13, 17, 24) // Ã–rnek olarak takÄ±m id'lerini bir liste olarak tanÄ±mladÄ±m\n\n    for (team_id <- team_ids) {\n      println(s\"$team_id\") ////\n      val url = s\"https://www.balldontlie.io/api/v1/games?seasons[]=$year&team_ids[]=$team_id\"\n      val response = requests.get(url)\n\n      if (response.statusCode == 200) {\n        println(response.statusCode) ////\n        val jsonText = response.text\n        val totalPageMa = JSON.parseFull(response.text).get.asInstanceOf[Map[String, Any]](\"meta\").asInstanceOf[Map[String, Any]](\"total_pages\").asInstanceOf[Double].toInt\n        println(s\"Total page match = $totalPageMa\")\n\n        \n\n        for (page <- 1 to totalPage) {\n          println(s\"$totalPage, su anki sayafa $page\" ) ////\n          val pageUrl = s\"https://www.balldontlie.io/api/v1/games?seasons[]=$year&team_ids[]=$team_id&page=$page\"\n          val pageResponse = requests.get(pageUrl)\n\n          if (pageResponse.statusCode == 200) {\n            println(response.statusCode) ////\n            val pageJsonText = pageResponse.text\n\n            val writer = new PrintWriter(s\"matchesID$team_id.json\")\n            writer.println(pageJsonText)\n            writer.close()\n\n            println(s\"matchesID$team_id.json dosyasÄ± kaydedildi. Sayfa: $page\")\n          } else {\n            println(s\"Hata oluÅŸtu: ${pageResponse.statusCode}\")\n          }\n        }\n      } else {\n        println(s\"Hata oluÅŸtu: ${response.statusCode}\")\n      }\n    }\n        println(\"Matches API Ended\")\n\n\n    // Stats API\n\n    val r1 = requests.get(s\"https://www.balldontlie.io/api/v1/stats?seasons[]=$year&postseason=false\", readTimeout = 20000, connectTimeout = 20000)\n    val totalPageSt = JSON.parseFull(r1.text).get.asInstanceOf[Map[String, Any]](\"meta\").asInstanceOf[Map[String, Any]](\"total_pages\").asInstanceOf[Double].toInt\n    println(s\"Total page Stasts = $totalPageSt\") \n\n\n        val writer = new PrintWriter(\"stats.json\")\n\n        for (page <- 1 to totalPage) {\n        val r = requests.get(s\"https://www.balldontlie.io/api/v1/stats?seasons[]=$year&postseason=false&page=$page\", readTimeout = 20000, connectTimeout = 20000)\n\n        if (r.statusCode == 200) {\n                val jsonText = r.text\n                writer.println(jsonText)\n                println(s\"Page $page - API OK\")\n                Thread.sleep(2000)\n        } else {\n                println(s\"Page $page - API Error\")\n               }\n             }\n        writer.close()\n        \n         println(\"Stats API Ended\")\n\n        spark.stop()\n        }\n}\n\n\n// ===== Buraya kadaar calisti \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Calisti\n/// Extract Final\nimport org.apache.spark.sql.SparkSession\nimport java.io.PrintWriter\nimport scala.util.parsing.json.JSON\n\nobject Extract {\n  def main(args: Array[String]) {\n    val spark = SparkSession.builder()\n      .appName(\"Extract\")\n      .master(\"local[*]\")\n      .getOrCreate()\n\n    val year: Int = 2021\n    val totalPage: Int = 4  // sil sonra !!!!!!!!!!!!!!!!!!\n    val totalPage2: Int = 50 // sill sonra !!!!!!!!!\n    println(s\"$year, $totalPage, Step 1 OK\")\n\n\n    // Teams API\n    val r = requests.get(\"https://www.balldontlie.io/api/v1/teams\")\n   \n   if (r.statusCode == 200 ){\n      val jsonText = r.text\n\n      val writer = new PrintWriter(\"teams1.json\")\n      writer.println(jsonText)\n\n      writer.close()\n     println(\"jsonText API Okey.\")\n     }  else {\n      println(\"jsonText API Error.\")\n     }\n\n   val r2 = requests.get(\"https://www.balldontlie.io/api/v1/teams?page=2\")\n   \n   if (r.statusCode == 200 ){\n      val jsonText2 = r2.text\n      val writer = new PrintWriter(\"teams2.json\")\n      writer.println(jsonText2)\n      writer.close()\n      println(\"jsonText2 API Okey.\")\n     }    else {\n      println(\"jsonText2 API Error.\")\n     }   \n\n     println(\"Teams API Ended\")\n\n     // Matches API\n    val team_ids: List[Int] = List(1, 13, 17, 24) // Ã–rnek olarak takÄ±m id'lerini bir liste olarak tanÄ±mladÄ±m\n    \n\n    for (team_id <- team_ids) {\n      println(s\"$team_id\") ////\n      val url = s\"https://www.balldontlie.io/api/v1/games?seasons[]=$year&team_ids[]=$team_id\"\n      val response = requests.get(url)\n\n      if (response.statusCode == 200) {\n        println(response.statusCode) ////\n        val jsonText = response.text\n        val totalPageMa = JSON.parseFull(response.text).get.asInstanceOf[Map[String, Any]](\"meta\").asInstanceOf[Map[String, Any]](\"total_pages\").asInstanceOf[Double].toInt\n        println(s\"Total page match = $totalPageMa\")\n\n        \n\n        for (page <- 1 to totalPage) {\n          println(s\"$totalPage, su anki sayafa $page\" ) ////\n          val pageUrl = s\"https://www.balldontlie.io/api/v1/games?seasons[]=$year&team_ids[]=$team_id&page=$page\"\n          val pageResponse = requests.get(pageUrl)\n\n          if (pageResponse.statusCode == 200) {\n            println(response.statusCode) ////\n            val pageJsonText = pageResponse.text\n\n            val writer = new PrintWriter(s\"matchesID$team_id.json\")\n            writer.println(pageJsonText)\n            writer.close()\n\n            println(s\"matchesID$team_id.json dosyasÄ± kaydedildi. Sayfa: $page\")\n          } else {\n            println(s\"Hata oluÅŸtu: ${pageResponse.statusCode}\")\n          }\n        }\n      } else {\n        println(s\"Hata oluÅŸtu: ${response.statusCode}\")\n      }\n    }\n        println(\"Matches API Ended\")\n\n\n    // Stats API\n\n    val r1 = requests.get(s\"https://www.balldontlie.io/api/v1/stats?seasons[]=$year&postseason=false\", readTimeout = 20000, connectTimeout = 20000)\n    val totalPageSt = JSON.parseFull(r1.text).get.asInstanceOf[Map[String, Any]](\"meta\").asInstanceOf[Map[String, Any]](\"total_pages\").asInstanceOf[Double].toInt\n    println(s\"Total page Stasts = $totalPageSt\") \n\n\n        val writer = new PrintWriter(\"stats.json\")\n\n        for (page <- 1 to totalPage2) {\n        val r = requests.get(s\"https://www.balldontlie.io/api/v1/stats?seasons[]=$year&postseason=false&page=$page\", readTimeout = 20000, connectTimeout = 20000)\n\n        if (r.statusCode == 200) {\n                val jsonText = r.text\n                writer.println(jsonText)\n                println(s\"Page $page - API OK\")\n                Thread.sleep(2000)\n        } else {\n                println(s\"Page $page - API Error\")\n               }\n             }\n        writer.close()\n        \n         println(\"Stats API Ended\")\n\n        spark.stop()\n        }\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: Signal, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0manalysis location (/Users/macbook/Desktop/IBM/DATA ENGINEER/00 - BootCamp Data Engineer - DataScientist/Ders Notlari Jupeyter Notebook/target/scala-2.12/zinc/inc_compile_2.12.zip,true)[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 0 s, completed 5 Haz 2023 10:49:49[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Done event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///Users/macbook/Desktop/IBM/DATA%20ENGINEER/00%20-%20BootCamp%20Data%20Engineer%20-%20DataScientist/Ders%20Notlari%20Jupeyter%20Notebook/TEST_EXAMS/TEST_09_SCALA/Transform.scala","languageId":"scala","version":1,"text":"/// Transform Final\n//Import Libararies\nimport org.apache.spark.sql.SparkSession\nimport org.apache.spark.sql.functions._\nimport org.apache.spark.sql.functions.explode\n\nobject Extract {\n  def main(args: Array[String]) {\n    val spark = SparkSession.builder()\n      .appName(\"Extract\")\n      .master(\"local[*]\")\n      .getOrCreate()\n\n      // ------------------ Teams Data ------------------\n      // Read Teams Data as Json\n      val path = \"/home/ubuntu/projectScala\"\n      val teams1Path = s\"$path/teams1.json\"\n      val teams2Path = s\"$path/teams2.json\"\n\n      val jsTeams1 = spark.read.json(teams1Path)\n      val jsTeams2 = spark.read.json(teams2Path)\n\n      // Convert to Dataframe\n      val dfTeams1 = jsTeams1.withColumn(\"data\", explode(col(\"data\"))).select(\"data.id\", \"data.abbreviation\", \"data.city\", \"data.conference\", \"data.division\", \"data.full_name\", \"data.name\")\n      val dfTeams2 = jsTeams2.withColumn(\"data\", explode(col(\"data\"))).select(\"data.id\", \"data.abbreviation\", \"data.city\", \"data.conference\", \"data.division\", \"data.full_name\", \"data.name\")\n      \n      val dfTeamsAll = dfTeams1.union(dfTeams2)\n      println(dfTeams1.count(), dfTeams2.count(), dfTeamsAll.count())\n\n      val dfTeamsNeded = dfTeamsAll.filter(col(\"full_name\").isin(\"Phoenix Suns\", \"Atlanta Hawks\", \"Milwaukee Bucks\", \"LA Clippers\"))\n      println(\"dfTeamsNeded\")\n      dfTeamsNeded.show()\n      \n      \n      // ------------------ Matches Data ------------------\n      // Read Matches Data as Json\n      val js1 = spark.read.json(s\"$path/matchesID1.json\")\n      val js2 = spark.read.json(s\"$path/matchesID13.json\")\n      val js3 = spark.read.json(s\"$path/matchesID17.json\")\n      val js4 = spark.read.json(s\"$path/matchesID24.json\")\n      val mergedJs = js1.union(js2).union(js3).union(js4)\n\n      // Convert to Dataframe\n      val matchesDf = mergedJs\n                            .withColumn(\"data\", explode(col(\"data\")))\n                            .select(\n                              col(\"data.id\").as(\"match_id\"),\n                              col(\"data.date\"),\n                              col(\"data.home_team.id\").as(\"home_team_id\"),\n                              col(\"data.home_team_score\"),\n                              col(\"data.visitor_team.id\").as(\"visitor_team_id\"),\n                              col(\"data.visitor_team_score\")\n                            )\n      \n\n      // Filter Date year 2021      \n      val matchesDfF2021 = matchesDf.filter(col(\"date\").contains(\"2021\")).drop(col(\"date\"))\n      \n      // Filter Team ids (1, 13, 17,24)\n      val matchesDfF2021FTeamId = matchesDfF2021.filter(col(\"home_team_id\").isin(\"1\", \"17\", \"13\", \"24\") || col(\"visitor_team_id\").isin(\"1\", \"17\", \"13\", \"24\"))\n      \n      // Convert to Integer\n      val matchesDfF2021FTeamIdCo = matchesDfF2021FTeamId.columns.foldLeft(matchesDfF2021FTeamId) { (tempDF, colName) => tempDF.withColumn(colName, col(colName).cast(\"integer\"))}\n      println(\"matchesDfF2021FTeamIdCo\")\n      println(matchesDfF2021FTeamIdCo.show(5))\n\n      // Union Dataframe\n      val matchesDfF2021FTeamIdCoUnion = matchesDfF2021FTeamIdCo.select(\n                            col(\"match_id\"),\n                            col(\"home_team_id\").alias(\"team_id\"),\n                            col(\"home_team_score\").alias(\"score\"),\n                            lit(\"home\").alias(\"where\")\n                          ).union(\n                            matchesDfF2021FTeamIdCo.select(\n                              col(\"match_id\"),\n                              col(\"visitor_team_id\").alias(\"team_id\"),\n                              col(\"visitor_team_score\").alias(\"score\"),\n                              lit(\"visitor\").alias(\"where\")\n                            )\n                          )\n      println(\"matchesDfF2021FTeamIdCoUnion\")\n      matchesDfF2021FTeamIdCoUnion.show(5)     \n\n      // Final Match Data (matches)\n      val matches = matchesDfF2021FTeamIdCoUnion.join(dfTeamsNeded.select(\"id\", \"full_name\"), matchesDfF2021FTeamIdCoUnion(\"team_id\") === dfTeamsNeded(\"id\")).drop(\"id\",\"where\")\n      println(\"matches\")\n      println(matches.show(5))\n\n\n\n      // ------------------ Stats ------------------\n      // Reads Statistics data as Json\n      val dfstats = spark.read.json(s\"$path/stats.json\")\n\n      // Convert to Dataframe\n      val Stats = dfstats.withColumn(\"data\", explode(col(\"data\")))\n        .select(\n          col(\"data.ast\"), col(\"data.blk\"), col(\"data.dreb\"), col(\"data.fg3_pct\"), col(\"data.fg3a\"),col(\"data.fg3m\"), col(\"data.fg_pct\"), \n          col(\"data.fga\"), col(\"data.fgm\"), col(\"data.ft_pct\"),\n          col(\"data.fta\"), col(\"data.ftm\"),\n          col(\"data.game.date\").alias(\"game_date\"),\n          col(\"data.game.home_team_id\").alias(\"home_team_id\"),\n          col(\"data.game.home_team_score\").alias(\"home_team_score\"),\n          col(\"data.game.id\").alias(\"match_id\"),\n          col(\"data.game.period\"),\n          col(\"data.game.postseason\"),\n          col(\"data.game.season\"),\n          col(\"data.game.status\"),\n          col(\"data.game.time\"),\n          col(\"data.game.visitor_team_id\").alias(\"visitor_team_id\"),\n          col(\"data.game.visitor_team_score\").alias(\"visitor_team_score\"),\n          col(\"data.id\").alias(\"data_id\"),\n          col(\"data.min\"), col(\"data.oreb\"), col(\"data.pf\"),\n          col(\"data.player.first_name\").alias(\"player_first_name\"),\n          col(\"data.player.height_feet\").alias(\"player_height_feet\"),\n          col(\"data.player.height_inches\").alias(\"player_height_inches\"),\n          col(\"data.player.id\").alias(\"player_id\"),\n          col(\"data.player.last_name\").alias(\"player_last_name\"),\n          col(\"data.player.position\").alias(\"player_position\"),\n          col(\"data.player.team_id\").alias(\"player_team_id\"),\n          col(\"data.player.weight_pounds\").alias(\"player_weight_pounds\"),\n          col(\"data.pts\"), col(\"data.reb\"), col(\"data.stl\"),\n          col(\"data.team.abbreviation\").alias(\"team_abbreviation\"),\n          col(\"data.team.city\").alias(\"team_city\"),\n          col(\"data.team.conference\").alias(\"team_conference\"),\n          col(\"data.team.division\").alias(\"team_division\"),\n          col(\"data.team.full_name\").alias(\"team_full_name\"),\n          col(\"data.team.id\").alias(\"team_ID_\"),\n          col(\"data.team.name\").alias(\"team_name\"),\n          col(\"data.turnover\")\n        )\n        // Drop Duplicates\n        val StatsDropDup = Stats.dropDuplicates()\n\n        // Filter Teams with Id and select only date 2021\n        val StatsF2021 = StatsDropDup.filter(col(\"game_date\").contains(\"2021\"))\n        // onceki hali sil ==> val dfs01 = Stats.filter(col(\"team_ID_\").isin(\"1\", \"17\", \"13\", \"24\")).filter(col(\"game_date\").contains(\"2021\"))\n        // Filter  match_id with Match DataFrame and Stats DataFrame\n       \n        println(\"StatsF2021\")\n        println(StatsF2021.show(5))\n\n         spark.stop()\n        }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        val listMatch = StatsF2021.select(\"match_id\").as[String].collect.toList\n        val StatsF2021FGameId = StatsF2021.filter(col(\"match_id\").isin(listMatch: _*))\n        \n        // Convert Column Types\n        val integerColumns = Seq(\n                                \"ast\", \"blk\", \"dreb\", \"fg3a\", \"fg3m\", \"fga\", \"fgm\", \"fta\", \"ftm\", \"home_team_id\", \"home_team_score\", \"match_id\", \"period\", \"season\",\n                                \"visitor_team_id\", \"visitor_team_score\", \"data_id\", \"oreb\", \"pf\",\"player_height_feet\", \"player_height_inches\", \"player_id\",\"player_team_id\",\n                                \"player_weight_pounds\", \"pts\", \"reb\", \"stl\", \"team_ID_\", \"turnover\"\n                              )\n\n        val doubleColumns = Seq(\"fg3_pct\", \"fg_pct\", \"ft_pct\")\n\n        val stringColumns = Seq(\n                                \"game_date\", \"status\", \"time\", \"min\", \"player_first_name\", \"player_last_name\", \"player_position\", \"team_abbreviation\",\n                                \"team_city\", \"team_conference\", \"team_division\",\"team_full_name\", \"team_name\"\n                              )\n\n        val dfs = StatsF2021FGameId.select(\n                                  integerColumns.map(col(_).cast(\"integer\")) ++\n                                  doubleColumns.map(col(_).cast(\"double\")) ++\n                                  stringColumns.map(col(_).cast(\"string\")): _*\n                                    )\n\n        // Print                                     \n        println(\"dfs\")\n        println(dfs.select(\"data_id\",\"team_ID_\", \"match_id\",\"player_id\", \"player_first_name\", \"player_team_id\", \"pts\",\"home_team_id\", \"home_team_score\",\"visitor_team_id\",\"visitor_team_score\" ).show(5))\n\n        // Stats join home and visitor\n        val df_new = dfs.select(\n          col(\"match_id\"),\n          col(\"home_team_id\").alias(\"team_id\"),\n          col(\"home_team_score\").alias(\"score\"),\n          lit(\"home\").alias(\"where\")\n        ).union(\n          dfs.select(\n            col(\"match_id\"),\n            col(\"visitor_team_id\").alias(\"team_id\"),\n            col(\"visitor_team_score\").alias(\"score\"),\n            lit(\"visitor\").alias(\"where\")\n          )\n        )\n\n        val stats = dfs.join(df_new, dfs(\"match_id\") === df_new(\"match_id\")).drop(\"home_team_id\", \"home_team_score\",\"visitor_team_id\",\"visitor_team_score\").drop(df_new(\"match_id\"))\n        val statsDropDup = stats.dropDuplicates()\n        println(\"statsFinal\")\n        val statsFinal = statsDropDup.filter(col(\"team_id\").isin(1,13,17,24))\n        statsFinal.select(\"team_ID_\", \"match_id\",\"player_id\", \"player_first_name\", \"player_team_id\",\"team_id\", \"score\").show(3)\n        //statsFinal.select( \"data_id\",\"match_id\",\"team_id\", \"score\").show()\n        //statsFinal.select( \"team_id\", \"match_id\", \"score\", \"player_id\", \"player_first_name\", \"player_team_id\").show()\n        val st = statsFinal.select(\"match_id\",\"team_id\", \"score\", \"player_id\",  \"player_first_name\", \"player_last_name\", \"pts\", \"reb\", \"stl\", \"ast\", \"blk\", \"dreb\", \"fg3a\", \"fg3m\", \"fga\", \"fgm\", \"fta\", \"ftm\", \"fg3_pct\", \"fg_pct\", \"ft_pct\")\n        st.show(3)\n\n\n        // Final Data\n        println(\"FinalData\")\n        val FinalData = matches.join(st, Seq(\"match_id\", \"team_id\"))\n        FinalData.show(5)\n\n\n        spark.stop()\n        }\n}\n\n\n\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mForcing garbage collection...[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled request received: shutdown: JsonRpcRequestMessage(2.0, â™¨1, shutdown, null})[0m
